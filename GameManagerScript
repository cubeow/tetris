using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.Linq;

public class GameManagerScript : MonoBehaviour
{
    // The first 4 elements of the array are the spawn points for each tetromino
    // The 5th element of the array is the point which they can be rotated about
    // The 6th element of the array is the tetromino type
    public string[] TetrominoI = new string[6] { "4,19", "4,18", "4,17", "4,16", "4,18", "I"};
    public string[] TetrominoS = new string[6] { "4,19", "5,19", "3,18", "4,18", "4,18", "S"};
    public string[] TetrominoZ = new string[6] { "4,19", "5,19", "5,18", "6,18", "5,18", "Z"};
    public string[] TetrominoT = new string[6] { "4,19", "3,18", "4,18", "5,18", "4,18", "T"};
    public string[] TetrominoJ = new string[6] { "3,19", "3,18", "4,18", "5,18", "4,19", "J"};
    public string[] TetrominoL = new string[6] { "5,19", "3,18", "4,18", "5,18", "4,19", "L"};
    public string[] TetrominoO = new string[6] { "4,19", "5,19", "4,18", "5,18", "4.5, 18.5", "O"};

    public string[][] tetrominoes;
    public string[] currentTetromino;
    public Dictionary<string, string> placedBlocksDict;
    public bool goingDown = false;
    public string run1 = "";
    public string run2 = "";
    Coroutine tetrisRoutineCoroutine;
    Coroutine pressDownCoroutine;
    Coroutine pressRightFastCoroutine;
    public float startTime;
    public bool speedy;
    public float initialDelay;
    public int lines;
    // Start is called before the first frame update
    void Start()
    {
        placedBlocksDict = new Dictionary<string, string>();
        tetrominoes = new string[][] {TetrominoI, TetrominoS, TetrominoZ, TetrominoT, TetrominoJ, TetrominoL, TetrominoO };
        currentTetromino = (string[])tetrominoes[Random.Range(0, tetrominoes.Length)].Clone();
        tetrisRoutineCoroutine = StartCoroutine(TetrisRoutine());
        pressDownCoroutine = null;
        pressRightFastCoroutine = null;
        speedy = false;
        initialDelay = 0.15f;
    }

    // Update is called once per frame
    void Update()
    {
        if (Input.GetKeyDown(KeyCode.DownArrow))
        {
            pressDownCoroutine = StartCoroutine(PressDown());
        }
        if (Input.GetKeyUp(KeyCode.DownArrow))
        {
            if (pressDownCoroutine != null)
            {
                StopCoroutine(pressDownCoroutine);
            }
        }

        if (Input.GetKeyDown(KeyCode.RightArrow))
        {
            if (pressRightFastCoroutine != null)
            {
                StopCoroutine(pressRightFastCoroutine);
            }
            speedy = false;
            startTime = Time.time;
            rightTetris(1);
            refresh();
        }
        if (Input.GetKey(KeyCode.RightArrow))
        {
            if (Time.time-startTime > initialDelay && speedy == false)
            {
                speedy = true;
                pressRightFastCoroutine = StartCoroutine(pressRightFast(1));
            }
        }
        if (Input.GetKeyUp(KeyCode.RightArrow))
        {
            if (pressRightFastCoroutine != null)
            {
                StopCoroutine(pressRightFastCoroutine);
            }
        }

        if (Input.GetKeyDown(KeyCode.LeftArrow))
        {
            if (pressRightFastCoroutine != null)
            {
                StopCoroutine(pressRightFastCoroutine);
            }
            speedy = false;
            startTime = Time.time;
            rightTetris(-1);
            refresh();
        }
        if (Input.GetKey(KeyCode.LeftArrow))
        {
            if (Time.time - startTime > initialDelay && speedy == false)
            {
                speedy = true;
                pressRightFastCoroutine = StartCoroutine(pressRightFast(-1));
            }
        }
        if (Input.GetKeyUp(KeyCode.LeftArrow))
        {
            if (pressRightFastCoroutine != null)
            {
                StopCoroutine(pressRightFastCoroutine);
            }
        }

        if (Input.GetKeyDown(KeyCode.X))
        {
            rotateClockwise();
            refresh();
        }

        if (Input.GetKeyDown(KeyCode.Z))
        {
            rotateCounterClockwise();
            refresh();
        }
    }

    public void rotateClockwise()
    {
        bool validString = true;
        string[] placeHolderTetromino = new string[5] { "", "", "", "", "" };
        float tempX;
        float rotateXCoord = float.Parse(currentTetromino[4].Split(",")[0]);
        float rotateYCoord = float.Parse(currentTetromino[4].Split(",")[1]);
        for (int i = 0; i < 4; i++)
        {
            float xCoord = float.Parse(currentTetromino[i].Split(",")[0]);
            float yCoord = float.Parse(currentTetromino[i].Split(",")[1]);
            xCoord = xCoord - rotateXCoord;
            yCoord = yCoord - rotateYCoord;
            tempX = xCoord;
            xCoord = yCoord;
            yCoord = tempX;
            yCoord = yCoord * -1;
            xCoord = xCoord + rotateXCoord;
            yCoord = yCoord + rotateYCoord;
            placeHolderTetromino[i] = xCoord + "," + yCoord;
            if (xCoord > 9 || xCoord < 0)
            {
                validString = false;
            }
            if (yCoord < 0 || yCoord > 19)
            {
                validString = false;
            }
        }
        for (int i = 0; i < 4; i++)
        {
            if (placedBlocksDict.ContainsKey(placeHolderTetromino[i]))
            {
                validString = false;
                break;
            }
        }
        if (validString == true)
        {
            for (int i = 0; i < 4; i++)
            {
                currentTetromino[i] = placeHolderTetromino[i];
            }
        }
    }

    public void rotateCounterClockwise()
    {
        bool validString = true;
        string[] placeHolderTetromino = new string[5] { "", "", "", "", "" };
        float tempX;
        float rotateXCoord = float.Parse(currentTetromino[4].Split(",")[0]);
        float rotateYCoord = float.Parse(currentTetromino[4].Split(",")[1]);
        for (int i = 0; i < 4; i++)
        {
            float xCoord = float.Parse(currentTetromino[i].Split(",")[0]);
            float yCoord = float.Parse(currentTetromino[i].Split(",")[1]);
            xCoord = xCoord - rotateXCoord;
            yCoord = yCoord - rotateYCoord;
            tempX = xCoord;
            xCoord = yCoord;
            yCoord = tempX;
            xCoord = xCoord * -1;
            xCoord = xCoord + rotateXCoord;
            yCoord = yCoord + rotateYCoord;
            placeHolderTetromino[i] = xCoord + "," + yCoord;
            if (xCoord > 9 || xCoord < 0)
            {
                validString = false;
            }
            if (yCoord < 0 || yCoord > 19)
            {
                validString = false;
            }
        }
        if (validString == true)
        {
            for (int i = 0; i < 4; i++)
            {
                currentTetromino[i] = placeHolderTetromino[i];
            }
        }
    }
    IEnumerator TetrisRoutine()
    {
        while (true)
        {
            yield return new WaitForSeconds(1);
            if (!Input.GetKey(KeyCode.DownArrow))
            {
                downTetris();
                refresh();
            }
        }
    }

    IEnumerator PressDown()
    {
        while (true)
        {
            downTetris();
            refresh();
            yield return new WaitForSeconds(0.05f);
        }
    }

    IEnumerator pressRightFast(int changeX)
    {
        while (true)
        {
            rightTetris(changeX);
            refresh();
            yield return new WaitForSeconds(0.01f);
        }
    }

    public void downTetris()
    {
        bool timeToPlace = false;
        for (int i = 0; i < 4; i++)
        {
            if (float.Parse(currentTetromino[i].Split(",")[1]) == 0)
            {
                timeToPlace = true;
            }
        }
        if (timeToPlace)
        {
            placeTetrisProcedure();
        }

        if (!timeToPlace)
        {
            bool didPlace = false;
            bool validString = true;
            string[] placeHolderTetromino = new string[5] { "", "", "", "", "" };
            for (int i = 0; i < 5; i++)
            {
                float a = float.Parse(currentTetromino[i].Split(",")[1]) - 1;
                placeHolderTetromino[i] = currentTetromino[i].Split(",")[0] + "," + a;
                if (a > 19 || a < 0)
                {
                    validString = false;
                }
            }
            if (validString)
            {
                for (int i=0; i<4; i++)
                {
                    if (placedBlocksDict.ContainsKey(placeHolderTetromino[i]))
                    {
                        didPlace = true;
                        placeTetrisProcedure();
                        break;
                    }
                }
                if (!didPlace)
                {
                    for (int i = 0; i < 5; i++)
                    {
                        currentTetromino[i] = placeHolderTetromino[i];
                    }
                }
            }
        }
    }

    public void rightTetris(int changeX)
    {
        bool validString = true;
        string[] placeHolderTetromino = new string[5] { "", "", "", "", "" };
        for (int i = 0; i < 5; i++)
        {
            float a = float.Parse(currentTetromino[i].Split(",")[0]) + changeX;
            placeHolderTetromino[i] = a + "," + currentTetromino[i].Split(",")[1];
            if (a > 9 || a < 0)
            {
                validString = false;
            }
        }
        for (int i = 0; i < 4; i++)
        {
            if (placedBlocksDict.ContainsKey(placeHolderTetromino[i]))
            {
                validString = false;
                break;
            }
        }
        if (validString)
        {
            for (int i = 0; i < 5; i++)
            {
                currentTetromino[i] = placeHolderTetromino[i];
                //print(currentTetromino[i]);
            }
        }
    }

    public void refresh()
    {
        var allCubes = GameObject.FindGameObjectsWithTag("Cube");
        foreach (GameObject cube in allCubes)
        {
            if (currentTetromino.Skip(0).Take(4).Contains(cube.name))
            {
                GameObject.Find(cube.name).GetComponent<Renderer>().material.color = matchColor(currentTetromino[5]);
            }
            else
            {
                GameObject.Find(cube.name).GetComponent<Renderer>().material.color = new Color(0, 0, 0);
            }
            if (placedBlocksDict != null)
            {
                if (placedBlocksDict.Keys.Contains(cube.name))
                {
                    GameObject.Find(cube.name).GetComponent<Renderer>().material.color = matchColor(placedBlocksDict[cube.name]);
                }
            }
        }
    }

    public Color matchColor(string tetrominoType)
    {
        if (tetrominoType == "I")
        {
            return new Color(0, 240, 240);
        }
        else if (tetrominoType == "J")
        {
            return new Color(0, 0, 240);
        }
        else if (tetrominoType == "L")
        {
            return new Color(240, 160, 0);
        }
        else if (tetrominoType == "O")
        {
            return new Color(240, 240, 0);
        }
        else if (tetrominoType == "S")
        {
            return new Color(0, 240, 0);
        }
        else if (tetrominoType == "T")
        {
            return new Color(160, 0, 240);
        }
        else if (tetrominoType == "Z")
        {
            return new Color(240, 0, 0);
        }
        else
        {
            print("no matching tetromino type to string: " + tetrominoType);
            return new Color(0,0,0);
        }
    }

    public void placeTetrisProcedure()
    {
        bool needsUpdate = false;
        /*print("---------------------------------------");*/
        for (int i=0; i < 4; i++)
        {
            placedBlocksDict[currentTetromino[i]] = currentTetromino[5];
        }
        currentTetromino = (string[])tetrominoes[Random.Range(0, tetrominoes.Length)].Clone();
        var allCubes = GameObject.FindGameObjectsWithTag("Cube");
        Dictionary<string, int> rowFilledDict = new Dictionary<string, int>();
        // Loops through every placed block to find how many rows are filled to what extent
        foreach (KeyValuePair<string, string> kvp in placedBlocksDict)
        {
            if (rowFilledDict.ContainsKey(kvp.Key.Split(",")[1]))
            {
                rowFilledDict[kvp.Key.Split(",")[1]] += 1;
            }
            else
            {
                rowFilledDict[kvp.Key.Split(",")[1]] = 1;
            }
        }
        /*foreach (KeyValuePair<string, int> kvp in rowFilledDict)
        {
            print("Row number " + kvp.Key + " contains " + kvp.Value + " filled rows");
        }*/
        Dictionary<string, string> placedBlocksDictClone = new Dictionary<string, string>(placedBlocksDict);
        List<int> rowsDeleted = new List<int>();
        foreach (KeyValuePair<string, string> kvp in placedBlocksDictClone)
        {
            if (rowFilledDict[kvp.Key.Split(",")[1]] == 10)
            {
                placedBlocksDict.Remove(kvp.Key);
                if (!rowsDeleted.Contains(int.Parse(kvp.Key.Split(",")[1])))
                {
                    rowsDeleted.Add(int.Parse(kvp.Key.Split(",")[1]));
                    lines += 1;
                }
            }
        }
        /*foreach (KeyValuePair<string, string> kvp in placedBlocksDictClone2)
        {
            foreach (KeyValuePair<string, int> rvp in rowFilledDict)
            {
                if (rvp.Value == 10 && int.Parse(kvp.Key.Split(",")[1]) > int.Parse(rvp.Key))
                {
                    placedBlocksDict.Remove(kvp.Key);
                    placedBlocksDict.Add(kvp.Key.Split(",")[0] + "," + (int.Parse(kvp.Key.Split(",")[0]) - 1), kvp.Value);
                }
            }
        }*/
        Dictionary<string, int> assignDecreaseVal = new Dictionary<string, int>();
        foreach (KeyValuePair<string, string> kvp in placedBlocksDict)
        {
            assignDecreaseVal[kvp.Key] = 0;
            foreach (int rowDeleted in rowsDeleted)
            {
                if (rowDeleted < int.Parse(kvp.Key.Split(",")[1]))
                {
                    assignDecreaseVal[kvp.Key] -= 1;
                }
            }
        }
        /*foreach (KeyValuePair<string, int> kvp in assignDecreaseVal)
        {
            print("Block " + kvp.Key + " is going down " + kvp.Value + " blocks");
        }*/
        Dictionary<string, string> changedVal = new Dictionary<string, string>();
        foreach (KeyValuePair<string, int> kvp in assignDecreaseVal)
        {
            changedVal[kvp.Key.Split(",")[0] + "," + (int.Parse(kvp.Key.Split(",")[1]) + kvp.Value)] = placedBlocksDict[kvp.Key];
        }
        placedBlocksDict = changedVal;
        refresh();
    }
}
